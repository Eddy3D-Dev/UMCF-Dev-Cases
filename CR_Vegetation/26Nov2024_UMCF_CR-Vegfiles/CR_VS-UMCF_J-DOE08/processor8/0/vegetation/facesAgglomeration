/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
/*   Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt   *\
|  Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/vegetation";
    object      facesAgglomeration;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    left
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    right
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    back
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    front
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    bottom
    {
        type            calculated;
        value           nonuniform List<scalar> 
543
(
681
681
682
683
684
682
683
685
686
687
686
684
686
688
689
690
691
691
690
692
686
690
692
690
693
684
694
695
696
696
696
697
694
698
699
699
684
687
693
696
700
700
683
700
691
691
699
699
692
692
692
700
693
693
692
698
698
693
698
690
689
688
701
693
689
693
685
694
685
688
694
688
697
697
697
702
685
703
704
705
706
706
683
704
682
707
707
708
704
709
708
707
710
710
708
710
707
702
702
705
705
705
695
695
682
683
683
707
709
709
709
702
711
687
687
712
686
681
681
713
714
715
714
716
717
718
703
719
720
721
718
722
703
704
723
723
724
720
714
715
725
726
716
722
726
725
719
727
721
720
727
728
729
729
730
728
731
731
725
731
728
732
731
725
733
733
719
734
734
727
721
734
734
735
701
736
737
738
739
688
740
741
738
737
735
742
711
701
701
739
743
744
724
745
740
738
712
689
746
747
748
736
711
711
749
750
751
737
744
743
743
743
752
753
754
755
723
756
741
713
757
732
758
759
760
751
750
724
755
761
747
762
763
749
748
748
747
764
764
749
752
765
755
736
766
767
716
767
768
769
766
766
766
716
770
770
753
771
772
773
774
774
715
732
774
774
740
759
758
746
746
753
753
763
763
760
760
759
773
772
769
767
771
773
768
768
768
773
775
775
741
756
745
744
750
743
758
760
758
749
776
776
777
777
714
715
778
778
719
733
777
779
777
721
718
777
779
722
722
780
724
760
760
778
778
781
727
720
720
728
720
733
729
730
703
730
730
729
757
757
757
736
751
751
738
712
712
745
738
745
738
738
740
739
739
747
746
746
736
736
736
711
742
711
750
764
764
737
737
743
752
743
743
754
754
754
723
741
723
741
741
756
713
713
732
760
760
760
755
761
755
762
762
762
776
776
763
752
752
752
765
765
765
770
770
767
769
769
769
782
770
770
771
771
771
772
772
771
759
740
740
740
740
758
775
775
736
756
741
741
781
780
718
738
735
738
737
735
737
743
737
744
761
761
754
747
747
748
782
742
742
742
701
701
701
779
783
784
779
703
784
785
785
786
787
787
787
785
785
788
726
726
786
781
781
786
780
780
717
789
789
789
722
722
722
717
717
717
726
726
786
788
788
788
782
782
788
766
766
787
789
789
789
784
784
783
783
783
790
791
791
790
790
790
790
792
792
792
793
793
791
794
708
706
695
794
706
791
710
708
791
792
791
790
792
792
792
793
793
793
794
685
794
)
;
    }
    top
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    Building
    {
        type            calculated;
        value           nonuniform List<scalar> 
223
(
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
)
;
    }
    air_to_vegetation
    {
        type            calculated;
        value           nonuniform List<scalar> 
407
(
1018
1019
1019
1020
1019
1021
1022
1018
1023
1023
1023
1023
1021
1021
1021
1021
1024
1022
1023
1023
1024
1022
1024
1020
1018
1025
1019
1026
1026
1027
1027
1026
1028
1021
1025
1025
1025
1021
1021
1021
1029
1029
1022
1018
1029
1020
1024
1029
1024
1028
1027
1020
1026
1030
1028
1026
1030
1030
1030
1030
1028
1024
1024
1018
1027
1028
1031
1032
1033
1034
1035
1036
1037
1036
1033
1032
1038
1032
1038
1039
1037
1040
1031
1036
1033
1033
1041
1031
1031
1037
1036
1032
1037
1037
1037
1038
1038
1039
1040
1035
1039
1035
1036
1040
1035
1036
1042
1043
1042
1044
1045
1043
1044
1045
1046
1046
1042
1046
1046
1042
1047
1048
1049
1050
1047
1051
1047
1047
1052
1042
1053
1054
1045
1045
1051
1051
1048
1044
1055
1043
1056
1057
1056
1044
1056
1045
1058
1059
1060
1061
1062
1063
1064
1065
1064
1050
1061
1050
1061
1066
1061
1062
1066
1058
1058
1058
1067
1067
1067
1068
1069
1068
1070
1071
1071
1063
1070
1069
1072
1072
1073
1074
1059
1075
1076
1077
1078
1079
1079
1079
1080
1062
1081
1082
1081
1082
1063
1083
1083
1083
1063
1084
1075
1085
1085
1086
1087
1087
1087
1087
1088
1049
1089
1080
1090
1090
1062
1065
1064
1065
1053
1056
1052
1051
1048
1052
1043
1053
1053
1053
1044
1054
1054
1053
1052
1048
1045
1055
1054
1051
1048
1056
1043
1056
1056
1053
1057
1044
1056
1053
1057
1057
1055
1055
1070
1063
1070
1069
1069
1069
1091
1091
1076
1077
1086
1076
1092
1093
1064
1064
1088
1064
1049
1064
1088
1064
1069
1067
1071
1074
1071
1093
1092
1076
1086
1076
1078
1078
1077
1077
1078
1093
1075
1093
1059
1059
1059
1086
1065
1088
1049
1080
1050
1073
1074
1058
1074
1060
1082
1091
1083
1068
1060
1068
1081
1060
1081
1060
1082
1067
1084
1084
1067
1084
1073
1073
1074
1074
1075
1075
1075
1092
1094
1095
1059
1085
1085
1095
1094
1095
1095
1092
1094
1094
1094
1072
1072
1094
1094
1096
1065
1096
1096
1097
1096
1065
1080
1097
1097
1097
1089
1089
1089
1079
1089
1089
1089
1090
1066
1090
1062
1066
1062
1090
1091
1063
1063
1098
1099
1098
1098
1098
1099
1100
1041
1041
1100
1100
1041
1099
1100
1101
1099
1034
1101
1034
1041
1101
1101
1039
1041
1100
1101
1034
1034
1100
1040
)
;
    }
    procBoundary8to0
    {
        type            processor;
        value           uniform 1102;
    }
    procBoundary8to1
    {
        type            processor;
        value           nonuniform List<scalar> 
17
(
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
)
;
    }
    procBoundary8to6
    {
        type            processor;
        value           nonuniform List<scalar> 
204
(
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
1322
1323
)
;
    }
    procBoundary8to7
    {
        type            processor;
        value           nonuniform List<scalar> 
313
(
1324
1325
1326
1327
1328
1329
1330
1331
1332
1333
1334
1335
1336
1337
1338
1339
1340
1341
1342
1343
1344
1345
1346
1347
1348
1349
1350
1351
1352
1353
1354
1355
1356
1357
1358
1359
1360
1361
1362
1363
1364
1365
1366
1367
1368
1369
1370
1371
1372
1373
1374
1375
1376
1377
1378
1379
1380
1381
1382
1383
1384
1385
1386
1387
1388
1389
1390
1391
1392
1393
1394
1395
1396
1397
1398
1399
1400
1401
1402
1403
1404
1405
1406
1407
1408
1409
1410
1411
1412
1413
1414
1415
1416
1417
1418
1419
1420
1421
1422
1423
1424
1425
1426
1427
1428
1429
1430
1431
1432
1433
1434
1435
1436
1437
1438
1439
1440
1441
1442
1443
1444
1445
1446
1447
1448
1449
1450
1451
1452
1453
1454
1455
1456
1457
1458
1459
1460
1461
1462
1463
1464
1465
1466
1467
1468
1469
1470
1471
1472
1473
1474
1475
1476
1477
1478
1479
1480
1481
1482
1483
1484
1485
1486
1487
1488
1489
1490
1491
1492
1493
1494
1495
1496
1497
1498
1499
1500
1501
1502
1503
1504
1505
1506
1507
1508
1509
1510
1511
1512
1513
1514
1515
1516
1517
1518
1519
1520
1521
1522
1523
1524
1525
1526
1527
1528
1529
1530
1531
1532
1533
1534
1535
1536
1537
1538
1539
1540
1541
1542
1543
1544
1545
1546
1547
1548
1549
1550
1551
1552
1553
1554
1555
1556
1557
1558
1559
1560
1561
1562
1563
1564
1565
1566
1567
1568
1569
1570
1571
1572
1573
1574
1575
1576
1577
1578
1579
1580
1581
1582
1583
1584
1585
1586
1587
1588
1589
1590
1591
1592
1593
1594
1595
1596
1597
1598
1599
1600
1601
1602
1603
1604
1605
1606
1607
1608
1609
1610
1611
1612
1613
1614
1615
1616
1617
1618
1619
1620
1621
1622
1623
1624
1625
1626
1627
1628
1629
1630
1631
1632
1633
1634
1635
1636
)
;
    }
    procBoundary8to9
    {
        type            processor;
        value           nonuniform List<scalar> 3(1637 1638 1639);
    }
}


// ************************************************************************* //
