/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
/*   Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt   *\
|  Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/vegetation";
    object      facesAgglomeration;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    left
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    right
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    back
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    front
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    bottom
    {
        type            calculated;
        value           nonuniform List<scalar> 
138
(
418
418
418
419
420
421
422
423
419
424
425
426
427
426
425
428
429
430
427
429
431
430
424
424
432
433
434
435
421
421
421
421
436
429
419
437
432
433
433
435
436
419
426
437
436
438
421
432
432
432
438
435
435
437
426
437
437
418
429
436
420
439
427
440
440
430
427
441
441
425
439
439
442
442
425
443
443
428
431
443
443
434
434
434
421
438
438
435
435
433
430
424
424
418
424
418
420
444
444
422
422
422
423
423
423
445
445
445
446
446
445
428
447
447
431
447
447
420
444
444
440
440
428
441
441
431
442
442
442
439
446
446
428
428
428
431
431
431
)
;
    }
    top
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    tower
    {
        type            calculated;
        value           nonuniform List<scalar> 
232
(
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
)
;
    }
    air_to_vegetation
    {
        type            calculated;
        value           nonuniform List<scalar> 
218
(
680
681
682
683
684
685
684
686
687
681
688
689
682
689
682
690
690
691
692
684
692
691
688
691
680
693
680
681
693
691
694
694
687
695
687
695
682
682
683
683
683
682
684
693
693
685
693
693
684
686
693
693
686
686
686
687
681
681
686
686
688
696
697
697
690
698
698
698
698
689
699
689
689
699
690
690
690
690
690
692
684
684
684
692
692
691
691
691
691
694
694
694
700
687
700
687
695
687
700
700
700
700
700
700
701
687
701
701
701
680
680
699
699
689
699
696
696
682
683
684
684
684
693
696
696
696
683
695
700
680
699
695
695
700
699
682
684
693
685
689
693
685
685
685
685
685
685
685
693
693
693
693
686
681
681
683
683
696
688
681
696
697
697
692
692
692
696
688
688
697
697
682
680
699
680
698
698
699
698
699
699
689
699
697
697
697
697
688
688
688
691
688
691
688
691
694
694
694
694
682
682
700
694
700
700
701
701
698
701
695
701
695
695
695
695
695
700
699
)
;
    }
    procBoundary11to10
    {
        type            processor;
        value           nonuniform List<scalar> 
129
(
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
)
;
    }
    procBoundary11to13
    {
        type            processor;
        value           nonuniform List<scalar> 3(831 832 833);
    }
    procBoundary11to14
    {
        type            processor;
        value           nonuniform List<scalar> 
115
(
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
)
;
    }
    procBoundary11to15
    {
        type            processor;
        value           nonuniform List<scalar> 8(949 950 951 952 953 954 955 956);
    }
    procBoundary11to16
    {
        type            processor;
        value           nonuniform List<scalar> 
250
(
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
)
;
    }
    procBoundary11to19
    {
        type            processor;
        value           nonuniform List<scalar> 
38
(
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
)
;
    }
}


// ************************************************************************* //
