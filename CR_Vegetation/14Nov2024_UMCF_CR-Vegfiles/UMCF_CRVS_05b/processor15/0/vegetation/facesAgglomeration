/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
/*   Windows 32 and 64 bit porting by blueCAPE: http://www.bluecape.com.pt   *\
|  Based on Windows porting (2.0.x v4) by Symscape: http://www.symscape.com   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0/vegetation";
    object      facesAgglomeration;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    left
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    right
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    back
    {
        type            calculated;
        value           nonuniform List<scalar> 
32
(
558
559
558
559
560
560
559
558
560
558
560
560
560
560
558
558
560
559
558
559
560
560
560
558
558
558
558
560
560
559
559
559
)
;
    }
    front
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    bottom
    {
        type            calculated;
        value           nonuniform List<scalar> 
115
(
561
561
562
563
564
565
563
565
564
563
566
562
567
568
569
570
571
561
566
563
572
573
572
574
575
567
572
575
574
570
569
572
576
577
578
571
564
562
562
566
567
568
578
579
577
578
569
580
580
563
581
581
581
582
582
581
567
583
583
577
577
569
583
583
575
569
582
582
571
565
565
565
583
583
563
570
570
564
580
580
562
562
562
568
579
579
571
578
578
566
580
561
576
576
576
579
579
568
563
563
571
571
571
573
573
573
574
583
574
575
582
575
569
577
577
)
;
    }
    top
    {
        type            calculated;
        value           nonuniform List<scalar> 
24
(
584
585
584
585
585
585
585
585
585
584
585
585
585
585
584
584
584
584
585
585
585
585
584
585
)
;
    }
    tower
    {
        type            calculated;
        value           nonuniform List<scalar> 0();
    }
    air_to_vegetation
    {
        type            calculated;
        value           nonuniform List<scalar> 
415
(
586
587
588
589
590
590
591
592
591
593
593
594
590
595
596
597
596
597
592
595
598
598
599
600
600
601
601
602
603
604
605
604
605
606
607
607
608
609
608
609
610
610
609
608
586
586
589
605
609
609
604
587
604
587
586
587
587
587
611
599
588
588
588
588
612
608
613
608
590
614
614
614
614
590
591
615
591
592
592
591
591
593
593
593
593
594
594
590
590
590
595
616
616
616
616
596
596
616
616
616
614
617
597
597
595
595
595
618
615
615
592
592
595
595
618
618
618
618
618
613
608
613
598
598
613
613
598
598
586
613
619
619
619
619
620
619
619
619
600
600
600
600
601
601
601
601
607
602
607
602
602
603
603
602
603
605
605
605
605
604
604
604
604
604
604
587
586
620
606
606
606
606
587
606
617
618
612
612
621
607
622
597
597
622
607
588
588
588
612
589
589
616
596
596
611
611
618
611
613
621
621
610
623
607
607
607
594
617
617
617
617
617
618
608
608
586
607
599
624
607
607
625
623
625
623
619
622
622
622
621
597
586
587
610
620
623
620
623
623
621
612
612
588
612
589
589
589
588
588
588
613
609
590
614
591
591
626
592
591
626
593
594
594
594
593
594
626
590
590
590
595
596
616
596
616
616
597
616
614
614
596
596
617
617
617
596
597
597
596
596
596
615
615
595
611
611
618
592
595
595
595
618
610
610
613
613
613
598
613
613
613
613
613
598
586
598
599
624
599
599
624
624
624
624
607
599
599
619
619
619
625
625
625
619
619
625
622
619
621
619
621
619
600
600
601
601
602
602
603
603
603
602
605
624
603
624
603
606
606
606
604
610
620
620
620
623
610
620
610
610
610
610
606
606
606
606
615
615
623
615
615
615
622
594
597
597
597
597
611
615
611
618
589
612
589
609
609
624
624
624
609
624
626
625
626
626
625
626
626
622
594
622
621
616
623
)
;
    }
    procBoundary15to7
    {
        type            processor;
        value           nonuniform List<scalar> 
14
(
627
628
629
630
631
632
633
634
635
636
637
638
639
640
)
;
    }
    procBoundary15to10
    {
        type            processor;
        value           nonuniform List<scalar> 
134
(
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
)
;
    }
    procBoundary15to11
    {
        type            processor;
        value           nonuniform List<scalar> 8(775 776 777 778 779 780 781 782);
    }
    procBoundary15to12
    {
        type            processor;
        value           nonuniform List<scalar> 
12
(
783
784
785
786
787
788
789
790
791
792
793
794
)
;
    }
    procBoundary15to16
    {
        type            processor;
        value           nonuniform List<scalar> 
206
(
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
)
;
    }
    procBoundary15to17
    {
        type            processor;
        value           nonuniform List<scalar> 
195
(
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
)
;
    }
    procBoundary15to19
    {
        type            processor;
        value           nonuniform List<scalar> 
126
(
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
1301
1302
1303
1304
1305
1306
1307
1308
1309
1310
1311
1312
1313
1314
1315
1316
1317
1318
1319
1320
1321
)
;
    }
}


// ************************************************************************* //
